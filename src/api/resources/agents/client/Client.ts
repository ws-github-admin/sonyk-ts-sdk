/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Sonyk from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Agents {
    export interface Options {
        environment?: core.Supplier<environments.SonykEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * AI voice agent management (Developer API)
 */
export class Agents {
    protected readonly _options: Agents.Options;

    constructor(_options: Agents.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all agents for the organization
     *
     * @param {Sonyk.ListAgentsRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.listAgents()
     */
    public listAgents(
        request: Sonyk.ListAgentsRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.AgentListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listAgents(request, requestOptions));
    }

    private async __listAgents(
        request: Sonyk.ListAgentsRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.AgentListResponse>> {
        const { page, limit, search } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/agents",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.AgentListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling GET /api/developer/agents.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new AI voice agent with specified configuration
     *
     * @param {Sonyk.CreateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.createAgent({
     *         agent_name: "Restaurant Receptionist",
     *         agent_json: {
     *             llm: {
     *                 provider: "openai",
     *                 model: "gpt-5",
     *                 systemPrompt: "# Role\nYou are Georgia, a friendly and professional receptionist at the  restaurant.\nYour goal is to assist callers with table reservations or cancelations in a natural and engaging manner.\n\nRestaurant opening hours: 10 AM to 11 PM daily\nLocation: 24 Park Street\n\n# Tasks\n- Answer questions about the restaurant\n- Make table reservations\n- Cancel existing reservations\n- Provide information about menu and hours\n\n# Guidelines\n- Always be polite and professional\n- Confirm all reservation details\n- If you can't help, politely explain and offer alternatives\n"
     *             },
     *             stt: {
     *                 provider: "deepgram",
     *                 model: "nova-3",
     *                 language: "en"
     *             },
     *             tts: {
     *                 provider: "elevenlabs",
     *                 model: "eleven_multilingual_v2",
     *                 voiceId: "sarah"
     *             },
     *             name: "Georgia - Restaurant Receptionist",
     *             firstMessage: "Hello! Welcome to  restaurant. I'm Georgia, how can I help you today?"
     *         }
     *     })
     */
    public createAgent(
        request: Sonyk.CreateAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.AgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createAgent(request, requestOptions));
    }

    private async __createAgent(
        request: Sonyk.CreateAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.AgentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/agents",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.AgentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling POST /api/developer/agents.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific agent by ID with full configuration
     *
     * @param {string} agentId - Agent identifier
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.getAgent("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
     */
    public getAgent(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.AgentDetailedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getAgent(agentId, requestOptions));
    }

    private async __getAgent(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.AgentDetailedResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/agents/${encodeURIComponent(agentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.AgentDetailedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/agents/{agentId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update agent configuration. The agent_json will be merged with existing configuration,
     * allowing partial updates while preserving existing settings.
     *
     * @param {string} agentId
     * @param {Sonyk.UpdateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.updateAgent("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
     */
    public updateAgent(
        agentId: string,
        request: Sonyk.UpdateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.AgentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateAgent(agentId, request, requestOptions));
    }

    private async __updateAgent(
        agentId: string,
        request: Sonyk.UpdateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.AgentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/agents/${encodeURIComponent(agentId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.AgentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling PUT /api/developer/agents/{agentId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete an agent (permanent deletion)
     *
     * @param {string} agentId
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.deleteAgent("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
     */
    public deleteAgent(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteAgent(agentId, requestOptions));
    }

    private async __deleteAgent(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/agents/${encodeURIComponent(agentId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling DELETE /api/developer/agents/{agentId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve all tools assigned to a specific agent
     *
     * @param {string} agentId
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.getAgentTools("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
     */
    public getAgentTools(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ToolListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getAgentTools(agentId, requestOptions));
    }

    private async __getAgentTools(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ToolListResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/agents/${encodeURIComponent(agentId)}/tools`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ToolListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/agents/{agentId}/tools.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Assign an existing tool to an agent
     *
     * @param {string} agentId
     * @param {Sonyk.AssignToolToAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.assignToolToAgent("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx", {
     *         toolId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx"
     *     })
     */
    public assignToolToAgent(
        agentId: string,
        request: Sonyk.AssignToolToAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__assignToolToAgent(agentId, request, requestOptions));
    }

    private async __assignToolToAgent(
        agentId: string,
        request: Sonyk.AssignToolToAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/agents/${encodeURIComponent(agentId)}/tools`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling POST /api/developer/agents/{agentId}/tools.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove a tool assignment from an agent
     *
     * @param {string} agentId
     * @param {Sonyk.UnassignToolFromAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.unassignToolFromAgent("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx", {
     *         toolId: "toolId"
     *     })
     */
    public unassignToolFromAgent(
        agentId: string,
        request: Sonyk.UnassignToolFromAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__unassignToolFromAgent(agentId, request, requestOptions));
    }

    private async __unassignToolFromAgent(
        agentId: string,
        request: Sonyk.UnassignToolFromAgentRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/agents/${encodeURIComponent(agentId)}/tools`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling DELETE /api/developer/agents/{agentId}/tools.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
