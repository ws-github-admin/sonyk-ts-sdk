/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Sonyk from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";

export declare namespace Assets {
    export interface Options {
        environment?: core.Supplier<environments.SonykEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Knowledge base and file management for agents (Developer API)
 */
export class Assets {
    protected readonly _options: Assets.Options;

    constructor(_options: Assets.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all knowledge base assets for a specific agent with pagination and filtering.
     *
     * Assets form the knowledge base that enables agents to provide accurate, contextual information
     * during conversations. The system supports multiple asset types and intelligent processing:
     *
     * ## Supported Asset Types
     * - **FILE**: Uploaded documents (PDF, DOCX, Excel, CSV, TXT, RTF)
     * - **TEXT**: Direct text input (FAQs, policies, procedures)
     * - **TRAINING**: Q&A pairs for specific agent training
     *
     * ## Processing Pipeline
     * 1. **Secure Upload**: Files validated and stored safely
     * 2. **Text Extraction**: Advanced parsers extract clean text from files
     * 3. **AI Enhancement**: OCR errors corrected, formatting cleaned
     * 4. **Smart Chunking**: Content divided into optimal retrieval segments
     * 5. **Vector Embeddings**: Semantic search capabilities enabled
     * 6. **Cloud Storage**: Secure storage with version control
     *
     * ## Use Cases
     * - Product documentation and manuals
     * - Company policies and procedures
     * - FAQ and help content
     * - Training materials and scripts
     * - Customer service knowledge base
     *
     * @param {string} agentId - Agent ID to retrieve assets for
     * @param {Sonyk.ListAgentAssetsRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.UnauthorizedError}
     * @throws {@link Sonyk.NotFoundError}
     *
     * @example
     *     await client.assets.listAgentAssets("ec2b396d-58e0-96f8-89af-f35908a8b36", {
     *         search: "product documentation"
     *     })
     */
    public listAgentAssets(
        agentId: string,
        request: Sonyk.ListAgentAssetsRequest = {},
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.AssetListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listAgentAssets(agentId, request, requestOptions));
    }

    private async __listAgentAssets(
        agentId: string,
        request: Sonyk.ListAgentAssetsRequest = {},
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.AssetListResponse>> {
        const { page, limit, type: type_, search } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (type_ != null) {
            _queryParams["type"] = type_;
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.AssetListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Sonyk.UnauthorizedError(
                        _response.error.body as Sonyk.ErrorResponse,
                        _response.rawResponse,
                    );
                case 404:
                    throw new Sonyk.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/assets/{agentId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve comprehensive information about a specific asset including processing details and content chunks.
     *
     * ## Response Details
     * - Complete asset metadata (title, type, creation date, size)
     * - Text processing information (chunk count, processing stats)
     * - Creator information and upload history
     * - Sample content chunks for preview
     * - Storage and accessibility details
     *
     * ## Processing Information
     * The response includes details about how the asset was processed:
     * - Original text length vs. processed length
     * - Number of chunks created for search
     * - Embedding model used for semantic search
     * - Text sanitization and enhancement applied
     *
     * @param {string} agentId
     * @param {number} assetId
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.NotFoundError}
     *
     * @example
     *     await client.assets.getAgentAssetDetails("ec2b396d-58e0-96f8-89af-f35908a8b36", 4567)
     */
    public getAgentAssetDetails(
        agentId: string,
        assetId: number,
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.AssetDetailedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getAgentAssetDetails(agentId, assetId, requestOptions));
    }

    private async __getAgentAssetDetails(
        agentId: string,
        assetId: number,
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.AssetDetailedResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/${encodeURIComponent(assetId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.AssetDetailedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Sonyk.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/assets/{agentId}/{assetId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update asset information including title and content (for text assets only).
     *
     * ## Update Capabilities
     * - **Title Updates**: Change the display name for any asset type
     * - **Content Updates**: Modify text content for TEXT type assets only
     * - **Automatic Reprocessing**: Text changes trigger re-chunking and re-embedding
     * - **Version Control**: Previous versions maintained for rollback if needed
     *
     * ## File Assets
     * File assets (PDF, DOCX, etc.) cannot have their content updated through this endpoint.
     * To update file content, delete the existing asset and upload a new file.
     *
     * ## Processing Impact
     * When text content is updated:
     * - Existing chunks are replaced with new ones
     * - Vector embeddings are regenerated
     * - Search index is updated immediately
     * - Agent has access to updated information within seconds
     *
     * @param {string} agentId
     * @param {number} assetId
     * @param {Sonyk.UpdateAgentAssetRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.BadRequestError}
     *
     * @example
     *     await client.assets.updateAgentAsset("ec2b396d-58e0-96f8-89af-f35908a8b36", 4569)
     */
    public updateAgentAsset(
        agentId: string,
        assetId: number,
        request: Sonyk.UpdateAgentAssetRequest = {},
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.UpdateAgentAssetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateAgentAsset(agentId, assetId, request, requestOptions));
    }

    private async __updateAgentAsset(
        agentId: string,
        assetId: number,
        request: Sonyk.UpdateAgentAssetRequest = {},
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.UpdateAgentAssetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/${encodeURIComponent(assetId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.UpdateAgentAssetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sonyk.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling PUT /api/developer/assets/{agentId}/{assetId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Permanently delete an asset from the agent's knowledge base.
     *
     * ## Deletion Process
     * 1. **Immediate Removal**: Asset becomes unavailable to the agent instantly
     * 2. **Chunk Cleanup**: All text chunks removed from search database
     * 3. **Storage Cleanup**: Files deleted from cloud storage
     * 4. **Permanent Action**: Deletion cannot be undone
     *
     * ## Impact on Agent Performance
     * - Agent loses access to this information immediately
     * - Ongoing conversations may be affected if they rely on this content
     * - Search results will no longer include information from this asset
     * - Related tool executions may return different results
     *
     * ## Best Practices
     * - Ensure the asset is no longer needed before deletion
     * - Consider updating content instead of deleting when possible
     * - Test agent performance after removing significant knowledge sources
     * - Maintain backups of important content outside the system
     *
     * @param {string} agentId
     * @param {number} assetId
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.assets.deleteAgentAsset("ec2b396d-58e0-96f8-89af-f35908a8b36", 4369)
     */
    public deleteAgentAsset(
        agentId: string,
        assetId: number,
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.DeleteAgentAssetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteAgentAsset(agentId, assetId, requestOptions));
    }

    private async __deleteAgentAsset(
        agentId: string,
        assetId: number,
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.DeleteAgentAssetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/${encodeURIComponent(assetId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.DeleteAgentAssetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling DELETE /api/developer/assets/{agentId}/{assetId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Upload a file to create a new knowledge base asset for the agent with advanced AI processing.
     *
     * ## Supported File Types & Processing
     *
     * ### Documents
     * - **PDF**: Advanced text extraction with OCR error correction
     * - **DOCX**: Microsoft Word documents with formatting preservation
     * - **RTF**: Rich Text Format documents
     * - **TXT**: Plain text files
     *
     * ### Spreadsheets
     * - **XLSX/XLS**: Excel files with sheet-by-sheet processing
     * - **CSV**: Comma-separated values with intelligent parsing
     *
     * ## AI-Enhanced Processing Pipeline
     *
     * ### 1. Secure Upload & Validation
     * - File type and size validation (10MB maximum)
     * - Malware scanning and security checks
     * - Temporary secure storage during processing
     *
     * ### 2. Intelligent Text Extraction
     * - **PDF**: Advanced parsing with OCR error detection
     * - **Office Docs**: Native format readers for clean extraction
     * - **Spreadsheets**: Multi-sheet processing with context preservation
     * - **Text Files**: Encoding detection and normalization
     *
     * ### 3. AI-Powered Content Enhancement
     * - **OCR Error Correction**: AI automatically fixes common text extraction errors
     * - **Format Cleaning**: Removes artifacts, fixes spacing and line breaks
     * - **Content Structuring**: Preserves headings, lists, and document structure
     * - **Language Optimization**: Improves readability and coherence
     *
     * ### 4. Smart Chunking Strategy
     * - **Semantic Segmentation**: Chunks follow document structure (paragraphs, sections)
     * - **Context Preservation**: Related information kept together
     * - **Optimal Size**: Balanced for both search relevance and response generation
     * - **Overlap Management**: Prevents information loss at chunk boundaries
     *
     * ### 5. Vector Embedding Generation
     * - **Latest Models**: Uses state-of-the-art embedding models
     * - **Semantic Understanding**: Enables conceptual search beyond keywords
     * - **Multi-language Support**: Works across different languages
     * - **Search Optimization**: Tuned for conversational AI retrieval
     *
     * ### 6. Secure Cloud Storage
     * - **Dual Storage**: Original files + processed text preserved
     * - **Version Control**: Change tracking and rollback capabilities
     * - **Access Control**: Organization-level security and permissions
     * - **Backup & Recovery**: Automated backup systems
     *
     * ## Quality Assurance
     * - **Processing Validation**: Ensures successful text extraction
     * - **Content Verification**: Checks for minimum viable content
     * - **Error Reporting**: Detailed feedback on processing issues
     * - **Performance Monitoring**: Tracks processing success rates
     *
     * ## Use Cases
     * - **Product Manuals**: Technical documentation and user guides
     * - **Policy Documents**: Company policies and procedures
     * - **Training Materials**: Educational content and SOPs
     * - **FAQ Collections**: Customer service knowledge bases
     * - **Research Papers**: Academic and technical documents
     * - **Spreadsheet Data**: Product catalogs, pricing, specifications
     *
     * @param {string} agentId
     * @param {Sonyk.UploadAgentAssetRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.BadRequestError}
     * @throws {@link Sonyk.ContentTooLargeError}
     * @throws {@link Sonyk.UnprocessableEntityError}
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.assets.uploadAgentAsset("ec2b396d-58e0-96f8-89af-f35908a8b36", {
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    public uploadAgentAsset(
        agentId: string,
        request: Sonyk.UploadAgentAssetRequest,
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.UploadAgentAssetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__uploadAgentAsset(agentId, request, requestOptions));
    }

    private async __uploadAgentAsset(
        agentId: string,
        request: Sonyk.UploadAgentAssetRequest,
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.UploadAgentAssetResponse>> {
        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        if (request.title != null) {
            _request.append("title", request.title);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/upload`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    ...(await this._getCustomAuthorizationHeaders()),
                    ..._maybeEncodedRequest.headers,
                }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.UploadAgentAssetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sonyk.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 413:
                    throw new Sonyk.ContentTooLargeError(
                        _response.error.body as Sonyk.ErrorResponse,
                        _response.rawResponse,
                    );
                case 422:
                    throw new Sonyk.UnprocessableEntityError(
                        _response.error.body as Sonyk.ErrorResponse,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling POST /api/developer/assets/{agentId}/upload.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new knowledge base asset directly from text content with intelligent processing.
     *
     * ## Ideal Use Cases
     *
     * ### Frequently Asked Questions (FAQs)
     * Perfect for customer service agents to provide consistent, accurate answers:
     * ```
     * # Customer Service FAQ
     *
     * ## Q: What are your business hours?
     * A: We are open Monday to Friday, 9 AM to 6 PM EST.
     *
     * ## Q: How can I return a product?
     * A: Visit our returns page or call customer service within 30 days.
     * ```
     *
     * ### Company Policies & Procedures
     * Ensure agents follow correct protocols and provide accurate policy information:
     * ```
     * # Refund Policy
     *
     * We offer full refunds within 30 days of purchase for:
     * - Unused products in original packaging
     * - Digital products within 7 days
     * - Services canceled before delivery
     * ```
     *
     * ### Product Information & Specifications
     * Enable agents to answer detailed product questions:
     * ```
     * # Product Specifications - Model XYZ
     *
     * ## Features
     * - Battery life: 24 hours
     * - Warranty: 2 years
     * - Compatible with: iOS, Android
     * - Colors available: Black, White, Blue
     * ```
     *
     * ### Training Scripts & Guidelines
     * Provide agents with conversation templates and best practices:
     * ```
     * # Call Opening Scripts
     *
     * ## For New Customers
     * "Thank you for calling [Company]. I'm [Name], and I'm here to help you today."
     *
     * ## For Returning Customers
     * "Welcome back to [Company]! How can I assist you today?"
     * ```
     *
     * ## Processing Features
     *
     * ### Intelligent Text Structuring
     * - **Heading Recognition**: Automatically identifies document structure
     * - **List Processing**: Preserves formatting for numbered and bulleted lists
     * - **Q&A Detection**: Recognizes question-answer patterns for better chunking
     * - **Context Preservation**: Keeps related information together
     *
     * ### Smart Chunking Algorithm
     * - **Semantic Boundaries**: Splits text at natural breakpoints
     * - **Size Optimization**: Balances chunk size for search and generation
     * - **Context Overlap**: Maintains continuity between chunks
     * - **Structure Awareness**: Respects headings, paragraphs, and sections
     *
     * ### Search Optimization
     * - **Vector Embeddings**: Enables semantic search beyond keyword matching
     * - **Multi-query Support**: Handles various ways users might ask the same question
     * - **Context Ranking**: Prioritizes most relevant information
     * - **Real-time Indexing**: Content immediately available for agent use
     *
     * ## Content Guidelines
     *
     * ### Structure Your Content
     * - Use clear headings and subheadings
     * - Organize related information together
     * - Include specific details and examples
     * - Use consistent terminology throughout
     *
     * ### Optimize for Search
     * - Include common terms customers might use
     * - Add alternative phrasings for the same concept
     * - Use complete sentences rather than fragments
     * - Include context that helps agents understand when to use the information
     *
     * ### Keep It Current
     * - Regular updates ensure accuracy
     * - Version control helps track changes
     * - Remove outdated information promptly
     * - Test agent responses after updates
     *
     * @param {string} agentId
     * @param {Sonyk.CreateAgentTextAssetRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.BadRequestError}
     *
     * @example
     *     await client.assets.createAgentTextAsset("ec2b396d-58e0-96f8-89af-f35908a8b36", {
     *         text: "# Customer Service FAQ - Updated January 2025\n\n## Business Information\n\n### Q: What are your business hours?\nA: We are open Monday to Friday from 9 AM to 6 PM EST. Weekend support is available via email only.\n\n### Q: Where are you located?\nA: Our headquarters is at 123 Business St, City, State 12345. We also have locations in Chicago and Miami.\n\n## Product Support\n\n### Q: How do I return a product?\nA: Returns are easy! Visit our website's return portal, print a shipping label, and send the item back within 30 days. Refunds are processed within 5-7 business days.\n\n### Q: What's your warranty policy?\nA: All products come with a standard 1-year warranty. Extended warranties up to 3 years are available for purchase.\n\n## Account Management\n\n### Q: How do I reset my password?\nA: Click 'Forgot Password' on the login page, enter your email, and follow the instructions sent to your inbox. The reset link expires in 24 hours.\n\n### Q: Can I change my subscription plan?\nA: Yes! Log into your account, go to Settings > Subscription, and select your new plan. Changes take effect immediately.\n"
     *     })
     */
    public createAgentTextAsset(
        agentId: string,
        request: Sonyk.CreateAgentTextAssetRequest,
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.CreateAgentTextAssetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createAgentTextAsset(agentId, request, requestOptions));
    }

    private async __createAgentTextAsset(
        agentId: string,
        request: Sonyk.CreateAgentTextAssetRequest,
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.CreateAgentTextAssetResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/text`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.CreateAgentTextAssetResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sonyk.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling POST /api/developer/assets/{agentId}/text.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve the full text content of an asset for review, editing, or developer processing.
     *
     * ## Content Details
     * Returns the processed, clean text content that the agent uses for answering questions:
     *
     * ### For File Assets (PDF, DOCX, etc.)
     * - **Processed Text**: Clean, AI-enhanced text extracted from the original file
     * - **OCR Corrections**: Common text extraction errors have been fixed
     * - **Formatting**: Preserved structure with proper spacing and line breaks
     * - **Enhanced Readability**: AI-improved grammar and coherence
     *
     * ### For Text Assets
     * - **Original Content**: Exactly as provided when created or last updated
     * - **Formatting**: Preserves markdown and text structure
     * - **Encoding**: UTF-8 with proper character handling
     *
     * ## Use Cases
     *
     * ### Content Review & Quality Assurance
     * - Verify that uploaded files were processed correctly
     * - Check that text extraction captured all important information
     * - Ensure AI enhancement improved rather than degraded content quality
     * - Validate that formatting and structure are preserved
     *
     * ### Content Editing & Updates
     * - Export content for developer editing in preferred tools
     * - Create updated versions based on current content
     * - Merge content from multiple assets
     * - Prepare content for translation or localization
     *
     * ### Integration & Automation
     * - Feed content into other systems or tools
     * - Create automated content workflows
     * - Generate reports or summaries
     * - Build content management integrations
     *
     * ### Backup & Archival
     * - Create local backups of knowledge base content
     * - Archive content for compliance or legal requirements
     * - Migrate content to other systems
     * - Maintain version history outside the platform
     *
     * ## Response Information
     * The response includes both the content and useful metadata:
     * - **Content Length**: Character count for processing planning
     * - **Creation Date**: When the asset was originally created
     * - **Asset Type**: Whether it's a file upload or direct text input
     * - **Processing Status**: Information about how the content was processed
     *
     * @param {string} agentId
     * @param {number} assetId
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.NotFoundError}
     *
     * @example
     *     await client.assets.getAgentAssetContent("ec2b396d-58e0-96f8-89af-f35908a8b36", 3478)
     */
    public getAgentAssetContent(
        agentId: string,
        assetId: number,
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.GetAgentAssetContentResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getAgentAssetContent(agentId, assetId, requestOptions));
    }

    private async __getAgentAssetContent(
        agentId: string,
        assetId: number,
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.GetAgentAssetContentResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/${encodeURIComponent(assetId)}/content`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.GetAgentAssetContentResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Sonyk.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/assets/{agentId}/{assetId}/content.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Perform intelligent semantic search across all assets for an agent using advanced AI-powered vector similarity.
     *
     * ## How Semantic Search Works
     *
     * Unlike traditional keyword search, semantic search understands the **meaning** behind your query:
     *
     * ### Traditional Keyword Search
     * - Matches exact words and phrases only
     * - Misses related concepts and synonyms
     * - Requires precise terminology
     * - Limited by exact word matching
     *
     * ### AI-Powered Semantic Search
     * - **Understands Intent**: Grasps what you're really asking about
     * - **Conceptual Matching**: Finds related ideas even with different words
     * - **Context Awareness**: Considers the full meaning of your query
     * - **Multi-language Support**: Works across different languages and terminology
     * - **Fuzzy Understanding**: Handles typos, variations, and informal language
     *
     * ## Search Examples
     *
     * ### Query: "How do I reset my password?"
     * **Finds content like:**
     * - "Password reset instructions"
     * - "Forgotten login credentials"
     * - "Account access recovery"
     * - "Login troubleshooting steps"
     *
     * ### Query: "Product warranty information"
     * **Finds content like:**
     * - "Guarantee terms and conditions"
     * - "Return and replacement policies"
     * - "Product protection coverage"
     * - "Service agreement details"
     *
     * ### Query: "Business hours"
     * **Finds content like:**
     * - "Operating schedule"
     * - "Store hours"
     * - "Service availability times"
     * - "Contact information"
     *
     * ## Retrieval-Augmented Generation (RAG)
     *
     * This search endpoint powers the RAG system that enables agents to provide accurate, contextual responses:
     *
     * ### 1. Query Understanding
     * - User asks a question during a call
     * - Agent's AI converts the question to search terms
     * - System generates vector embedding for semantic matching
     *
     * ### 2. Knowledge Retrieval
     * - Search finds most relevant content chunks
     * - Multiple sources combined for comprehensive answers
     * - Results ranked by relevance and recency
     *
     * ### 3. Response Generation
     * - Agent's LLM uses retrieved content as context
     * - Generates natural, conversational response
     * - Combines multiple sources when helpful
     * - Maintains accuracy while being conversational
     *
     * ## Search Parameters & Tuning
     *
     * ### Similarity Threshold (0.0 - 1.0)
     * Controls how closely results must match your query:
     * - **0.5-0.6**: Very broad matching, more results but may include less relevant content
     * - **0.7-0.8**: Balanced matching, good mix of relevance and recall **(recommended)**
     * - **0.9-1.0**: Strict matching, only very closely related content returned
     *
     * @param {string} agentId
     * @param {Sonyk.SearchAgentAssetsRequest} request
     * @param {Assets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.assets.searchAgentAssets("ec2b396d-58e0-96f8-89af-f35908a8b36", {
     *         query: "How do I reset my password?"
     *     })
     */
    public searchAgentAssets(
        agentId: string,
        request: Sonyk.SearchAgentAssetsRequest,
        requestOptions?: Assets.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.SearchAgentAssetsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__searchAgentAssets(agentId, request, requestOptions));
    }

    private async __searchAgentAssets(
        agentId: string,
        request: Sonyk.SearchAgentAssetsRequest,
        requestOptions?: Assets.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.SearchAgentAssetsResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/assets/${encodeURIComponent(agentId)}/search`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.SearchAgentAssetsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling POST /api/developer/assets/{agentId}/search.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
