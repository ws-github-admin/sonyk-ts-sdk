/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Sonyk from "../../../index.js";

export interface SearchAgentAssetsResponse extends Sonyk.BaseResponse {
    data?: SearchAgentAssetsResponse.Data;
}

export namespace SearchAgentAssetsResponse {
    export interface Data {
        /** The search query that was executed */
        query?: string;
        results?: Data.Results.Item[];
        /** Number of results returned */
        count?: number;
        /** Search configuration used */
        searchConfig?: Data.SearchConfig;
    }

    export namespace Data {
        export type Results = Results.Item[];

        export namespace Results {
            export interface Item {
                /** Unique identifier for the text chunk */
                pk_chunk_id?: number;
                /** ID of the asset containing this chunk */
                fk_asset_id?: number;
                /** The relevant text content */
                chunk_text?: string;
                chunk_type?: Item.ChunkType;
                /** Title of the source asset */
                title?: string;
                asset_type?: Item.AssetType;
                date_created?: string;
                /** Similarity score (higher = more relevant) */
                similarity?: number;
            }

            export namespace Item {
                export type ChunkType = "DOCUMENT" | "TRAINING_Q" | "TRAINING_A";
                export const ChunkType = {
                    Document: "DOCUMENT",
                    TrainingQ: "TRAINING_Q",
                    TrainingA: "TRAINING_A",
                } as const;
                export type AssetType = "FILE" | "TEXT" | "TRAINING";
                export const AssetType = {
                    File: "FILE",
                    Text: "TEXT",
                    Training: "TRAINING",
                } as const;
            }
        }

        /**
         * Search configuration used
         */
        export interface SearchConfig {
            similarityThreshold?: number;
            maxResults?: number;
            embeddingModel?: string;
            typeFilter?: string;
        }
    }
}
