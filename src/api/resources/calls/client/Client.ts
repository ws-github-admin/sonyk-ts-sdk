/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Sonyk from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Calls {
    export interface Options {
        environment?: core.Supplier<environments.SonykEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Calls {
    protected readonly _options: Calls.Options;

    constructor(_options: Calls.Options) {
        this._options = _options;
    }

    /**
     * Proxy endpoint to initiate calls through the Sonyk Core API system.
     * Validates permissions and credits, then forwards request to core.sonyk.io.
     *
     * @param {Sonyk.InitiateCallRequest} request
     * @param {Calls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.ForbiddenError}
     * @throws {@link Sonyk.NotFoundError}
     * @throws {@link Sonyk.RequestTimeoutError}
     * @throws {@link Sonyk.ServiceUnavailableError}
     *
     * @example
     *     await client.calls.initiateCall({
     *         agentId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx",
     *         toNumber: "+919831222222"
     *     })
     */
    public initiateCall(
        request: Sonyk.InitiateCallRequest,
        requestOptions?: Calls.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.CoreCallResponse> {
        return core.HttpResponsePromise.fromPromise(this.__initiateCall(request, requestOptions));
    }

    private async __initiateCall(
        request: Sonyk.InitiateCallRequest,
        requestOptions?: Calls.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.CoreCallResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/calls/initiate",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.CoreCallResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Sonyk.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Sonyk.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 408:
                    throw new Sonyk.RequestTimeoutError(_response.error.body as unknown, _response.rawResponse);
                case 503:
                    throw new Sonyk.ServiceUnavailableError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling POST /api/developer/calls/initiate.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
