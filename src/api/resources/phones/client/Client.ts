/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Sonyk from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Phones {
    export interface Options {
        environment?: core.Supplier<environments.SonykEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Phone number management (Developer API)
 */
export class Phones {
    protected readonly _options: Phones.Options;

    constructor(_options: Phones.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all phone numbers for the organization
     *
     * @param {Sonyk.ListPhonesRequest} request
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.listPhones({
     *         provider: "twilio"
     *     })
     */
    public listPhones(
        request: Sonyk.ListPhonesRequest = {},
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.PhoneListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listPhones(request, requestOptions));
    }

    private async __listPhones(
        request: Sonyk.ListPhonesRequest = {},
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.PhoneListResponse>> {
        const { page, limit, provider, is_active: isActive, agentId } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (provider != null) {
            _queryParams["provider"] = provider;
        }

        if (isActive != null) {
            _queryParams["is_active"] = isActive.toString();
        }

        if (agentId != null) {
            _queryParams["agentId"] = agentId;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/phones",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.PhoneListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling GET /api/developer/phones.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Add a new phone number to the organization
     *
     * @param {Sonyk.CreatePhoneRequest} request
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.createPhone({
     *         phoneNumber: "+xxxxxxxxxx",
     *         provider: "twilio"
     *     })
     */
    public createPhone(
        request: Sonyk.CreatePhoneRequest,
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.PhoneResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createPhone(request, requestOptions));
    }

    private async __createPhone(
        request: Sonyk.CreatePhoneRequest,
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.PhoneResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/phones",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.PhoneResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling POST /api/developer/phones.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific phone by ID
     *
     * @param {string} phoneId
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.getPhone("12da7cbd-94a4-4a45-b312-98a5sa1f5124")
     */
    public getPhone(
        phoneId: string,
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.PhoneResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPhone(phoneId, requestOptions));
    }

    private async __getPhone(
        phoneId: string,
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.PhoneResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/phones/${encodeURIComponent(phoneId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.PhoneResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/phones/{phoneId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update phone details or agent assignment
     *
     * @param {string} phoneId
     * @param {Sonyk.UpdatePhoneRequest} request
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.updatePhone("12da7cbd-94a4-4a45-b312-98a5sa1f5124")
     */
    public updatePhone(
        phoneId: string,
        request: Sonyk.UpdatePhoneRequest = {},
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.PhoneResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updatePhone(phoneId, request, requestOptions));
    }

    private async __updatePhone(
        phoneId: string,
        request: Sonyk.UpdatePhoneRequest = {},
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.PhoneResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/phones/${encodeURIComponent(phoneId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.PhoneResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling PUT /api/developer/phones/{phoneId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deactivate a phone number
     *
     * @param {string} phoneId
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.deletePhone("12da7cbd-94a4-4a45-b312-98a5sa1f5124")
     */
    public deletePhone(
        phoneId: string,
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deletePhone(phoneId, requestOptions));
    }

    private async __deletePhone(
        phoneId: string,
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/phones/${encodeURIComponent(phoneId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling DELETE /api/developer/phones/{phoneId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Assign a phone number to a specific agent
     *
     * @param {string} phoneId
     * @param {Sonyk.MapPhoneToAgentRequest} request
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.mapPhoneToAgent("12da7cbd-94a4-4a45-b312-98a5sa1f5124", {
     *         agentId: "agentId"
     *     })
     */
    public mapPhoneToAgent(
        phoneId: string,
        request: Sonyk.MapPhoneToAgentRequest,
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.PhoneResponse> {
        return core.HttpResponsePromise.fromPromise(this.__mapPhoneToAgent(phoneId, request, requestOptions));
    }

    private async __mapPhoneToAgent(
        phoneId: string,
        request: Sonyk.MapPhoneToAgentRequest,
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.PhoneResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/phones/${encodeURIComponent(phoneId)}/map-agent`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.PhoneResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling POST /api/developer/phones/{phoneId}/map-agent.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove agent assignment from a phone number
     *
     * @param {string} phoneId
     * @param {Phones.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.phones.unmapPhoneFromAgent("12da7cbd-94a4-4a45-b312-98a5sa1f5124")
     */
    public unmapPhoneFromAgent(
        phoneId: string,
        requestOptions?: Phones.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.PhoneResponse> {
        return core.HttpResponsePromise.fromPromise(this.__unmapPhoneFromAgent(phoneId, requestOptions));
    }

    private async __unmapPhoneFromAgent(
        phoneId: string,
        requestOptions?: Phones.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.PhoneResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/phones/${encodeURIComponent(phoneId)}/unmap-agent`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.PhoneResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling POST /api/developer/phones/{phoneId}/unmap-agent.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
