/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Sonyk from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Providers {
    export interface Options {
        environment?: core.Supplier<environments.SonykEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Provider API key management
 */
export class Providers {
    protected readonly _options: Providers.Options;

    constructor(_options: Providers.Options) {
        this._options = _options;
    }

    /**
     * Get all supported providers with their current configuration status.
     *
     * Returns information about which providers are supported and configured.
     *
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.providers.getProviders()
     */
    public getProviders(requestOptions?: Providers.RequestOptions): core.HttpResponsePromise<Sonyk.ProvidersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getProviders(requestOptions));
    }

    private async __getProviders(
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProvidersResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/providers",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProvidersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling GET /api/developer/providers.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get status of which providers have API keys configured.
     *
     * Returns list of configured providers without exposing key values.
     *
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.providers.getProviderKeysStatus()
     */
    public getProviderKeysStatus(
        requestOptions?: Providers.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ProviderStatusResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getProviderKeysStatus(requestOptions));
    }

    private async __getProviderKeysStatus(
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProviderStatusResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/providers/status",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProviderStatusResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/providers/status.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get all configured provider API keys (masked for security).
     *
     * Returns masked versions of API keys for all configured providers.
     *
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.providers.getProviderKeys()
     */
    public getProviderKeys(
        requestOptions?: Providers.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ProviderKeysResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getProviderKeys(requestOptions));
    }

    private async __getProviderKeys(
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProviderKeysResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/providers/keys",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProviderKeysResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling GET /api/developer/providers/keys.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Set or update multiple provider API keys at once.
     *
     * Empty string values will remove the provider key.
     *
     * @param {Sonyk.SetProviderKeysRequest} request
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.BadRequestError}
     *
     * @example
     *     await client.providers.setProviderKeys({
     *         provider_keys: {
     *             "openai": "your_openai_key_here",
     *             "groq": "your_groq_key_here",
     *             "deepgram": "your_deepgram_key_here",
     *             "anthropic": ""
     *         }
     *     })
     */
    public setProviderKeys(
        request: Sonyk.SetProviderKeysRequest,
        requestOptions?: Providers.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ProviderKeysUpdateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__setProviderKeys(request, requestOptions));
    }

    private async __setProviderKeys(
        request: Sonyk.SetProviderKeysRequest,
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProviderKeysUpdateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/providers/keys",
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProviderKeysUpdateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sonyk.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling PUT /api/developer/providers/keys.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get API key for a specific provider (masked for security)
     *
     * @param {Sonyk.GetProviderKeyRequestProvider} provider - Provider name
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.NotFoundError}
     *
     * @example
     *     await client.providers.getProviderKey("groq")
     */
    public getProviderKey(
        provider: Sonyk.GetProviderKeyRequestProvider,
        requestOptions?: Providers.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ProviderKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getProviderKey(provider, requestOptions));
    }

    private async __getProviderKey(
        provider: Sonyk.GetProviderKeyRequestProvider,
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProviderKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/providers/${encodeURIComponent(provider)}/key`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProviderKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Sonyk.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling GET /api/developer/providers/{provider}/key.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Set or update API key for a specific provider
     *
     * @param {Sonyk.SetProviderKeyRequestProvider} provider - Provider name
     * @param {Sonyk.SetProviderKeyRequest} request
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.BadRequestError}
     *
     * @example
     *     await client.providers.setProviderKey("groq", {
     *         api_key: "your_api_key_here"
     *     })
     */
    public setProviderKey(
        provider: Sonyk.SetProviderKeyRequestProvider,
        request: Sonyk.SetProviderKeyRequest,
        requestOptions?: Providers.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ProviderKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__setProviderKey(provider, request, requestOptions));
    }

    private async __setProviderKey(
        provider: Sonyk.SetProviderKeyRequestProvider,
        request: Sonyk.SetProviderKeyRequest,
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProviderKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/providers/${encodeURIComponent(provider)}/key`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProviderKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Sonyk.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling PUT /api/developer/providers/{provider}/key.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove API key for a specific provider
     *
     * @param {Sonyk.RemoveProviderKeyRequestProvider} provider - Provider name
     * @param {Providers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Sonyk.NotFoundError}
     *
     * @example
     *     await client.providers.removeProviderKey("groq")
     */
    public removeProviderKey(
        provider: Sonyk.RemoveProviderKeyRequestProvider,
        requestOptions?: Providers.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ProviderKeyResponse> {
        return core.HttpResponsePromise.fromPromise(this.__removeProviderKey(provider, requestOptions));
    }

    private async __removeProviderKey(
        provider: Sonyk.RemoveProviderKeyRequestProvider,
        requestOptions?: Providers.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ProviderKeyResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/providers/${encodeURIComponent(provider)}/key`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ProviderKeyResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Sonyk.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.SonykError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling DELETE /api/developer/providers/{provider}/key.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
