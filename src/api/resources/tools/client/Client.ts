/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Sonyk from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Tools {
    export interface Options {
        environment?: core.Supplier<environments.SonykEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

/**
 * Tool management (Developer API)
 */
export class Tools {
    protected readonly _options: Tools.Options;

    constructor(_options: Tools.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all available tools for the organization
     *
     * @param {Sonyk.ListToolsRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.listTools()
     */
    public listTools(
        request: Sonyk.ListToolsRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ToolListResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listTools(request, requestOptions));
    }

    private async __listTools(
        request: Sonyk.ListToolsRequest = {},
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ToolListResponse>> {
        const { page, limit, search } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (page != null) {
            _queryParams["page"] = page.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (search != null) {
            _queryParams["search"] = search;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/tools",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ToolListResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling GET /api/developer/tools.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new tool/function that can be assigned to agents
     *
     * @param {Sonyk.CreateToolRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.createTool({
     *         tool_name: "make_reservation",
     *         tool_description: "Creates a new restaurant reservation with the specified date, time, party size, and customer details",
     *         server_url: "https://api.restaurant.com/reservations"
     *     })
     */
    public createTool(
        request: Sonyk.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createTool(request, requestOptions));
    }

    private async __createTool(
        request: Sonyk.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ToolResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                "api/developer/tools",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling POST /api/developer/tools.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a specific tool by ID
     *
     * @param {string} toolId
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.getTool("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
     */
    public getTool(
        toolId: string,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getTool(toolId, requestOptions));
    }

    private async __getTool(
        toolId: string,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ToolResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/tools/${encodeURIComponent(toolId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling GET /api/developer/tools/{toolId}.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update tool configuration
     *
     * @param {string} toolId
     * @param {Sonyk.CreateToolRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.updateTool("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx", {
     *         tool_name: "make_reservation",
     *         tool_description: "Creates a new restaurant reservation with the specified date, time, party size, and customer details",
     *         server_url: "https://api.restaurant.com/reservations"
     *     })
     */
    public updateTool(
        toolId: string,
        request: Sonyk.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.ToolResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateTool(toolId, request, requestOptions));
    }

    private async __updateTool(
        toolId: string,
        request: Sonyk.CreateToolRequest,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.ToolResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/tools/${encodeURIComponent(toolId)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.ToolResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError("Timeout exceeded when calling PUT /api/developer/tools/{toolId}.");
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a tool
     *
     * @param {string} toolId
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.deleteTool("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
     */
    public deleteTool(
        toolId: string,
        requestOptions?: Tools.RequestOptions,
    ): core.HttpResponsePromise<Sonyk.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__deleteTool(toolId, requestOptions));
    }

    private async __deleteTool(
        toolId: string,
        requestOptions?: Tools.RequestOptions,
    ): Promise<core.WithRawResponse<Sonyk.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.SonykEnvironment.Default,
                `api/developer/tools/${encodeURIComponent(toolId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Sonyk.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.SonykError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.SonykError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.SonykTimeoutError(
                    "Timeout exceeded when calling DELETE /api/developer/tools/{toolId}.",
                );
            case "unknown":
                throw new errors.SonykError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = await core.Supplier.get(this._options.apiKey);
        return { "X-API-Key": apiKeyValue };
    }
}
