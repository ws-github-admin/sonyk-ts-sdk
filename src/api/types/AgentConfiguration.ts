/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * Complete configuration object for an AI voice agent. This JSON structure defines
 * all aspects of the agent's behavior, voice characteristics, and integrations.
 *
 * ## Key Components:
 *
 * ### LLM (Large Language Model)
 * Controls the agent's conversational intelligence and reasoning capabilities.
 *
 * ### STT (Speech-to-Text)
 * Handles voice recognition and transcription of caller speech.
 *
 * ### TTS (Text-to-Speech)
 * Manages voice synthesis and how the agent sounds to callers.
 *
 * ### Behavior Settings
 * Defines conversation flow, greetings, and interaction patterns.
 */
export interface AgentConfiguration {
    /**
     * Large Language Model configuration that powers the agent's conversational abilities.
     * This is the "brain" of your agent that processes user input and generates responses.
     */
    llm: AgentConfiguration.Llm;
    /**
     * Speech-to-Text configuration that converts caller voice to text.
     * This determines how accurately the agent understands what callers say.
     */
    stt: AgentConfiguration.Stt;
    /**
     * Text-to-Speech configuration that controls how the agent's voice sounds.
     * This determines the personality and quality of the agent's speech.
     */
    tts: AgentConfiguration.Tts;
    /** Display name for the agent (for your reference) */
    name: string;
    /**
     * **Critical Setting**: The first thing your agent says when someone calls.
     * This sets the tone for the entire conversation.
     *
     * **Tips:**
     * - Keep it friendly and professional
     * - Clearly identify who/what the agent represents
     * - Ask how you can help
     * - Keep it under 20 words for best experience
     */
    firstMessage: string;
    /**
     * Optional webhook URL to receive call events and data.
     * Your server will receive POST requests with:
     * - Call transcripts
     * - Call summaries
     * - Call duration and costs
     * - Custom data from tool executions
     */
    webhookUrl?: string;
    /**
     * Phrases that will automatically end the call when spoken by the caller.
     * Useful for giving callers control over call termination.
     */
    endCallPhrases?: string[];
    /**
     * Maximum call duration in seconds to prevent runaway costs:
     * - **300**: 5 minutes (short interactions)
     * - **600**: 10 minutes (recommended for most use cases)
     * - **1800**: 30 minutes (detailed conversations)
     */
    maxCallDuration?: number;
    /**
     * Delay before agent responds in milliseconds.
     * Adds natural conversation flow:
     * - **200**: Very quick responses
     * - **500**: Natural timing (recommended)
     * - **1000**: More thoughtful responses
     */
    responseDelay?: number;
    /**
     * Whether callers can interrupt the agent while it's speaking.
     * - **true**: Natural conversation flow (recommended)
     * - **false**: Agent always finishes speaking first
     */
    interruptible?: boolean;
    /**
     * Optional phone number to forward calls to if the agent cannot handle them.
     * Useful for escalation or human handoff.
     */
    callForwardNumber?: string;
    /**
     * Optional background sound URL for ambiance.
     * Should be a subtle, looping audio file.
     */
    backgroundSound?: string;
    structuredDataSchema?: AgentConfiguration.StructuredDataSchema;
    /** Additional custom configuration parameters */
    customSettings?: Record<string, unknown>;
}

export namespace AgentConfiguration {
    /**
     * Large Language Model configuration that powers the agent's conversational abilities.
     * This is the "brain" of your agent that processes user input and generates responses.
     */
    export interface Llm {
        /**
         * Specific AI model to use. Each model has different capabilities:
         * - **gpt-4o**: Most capable, best for complex reasoning
         * - **gpt-4o-mini**: Fast and cost-effective, good for most use cases
         * - **claude-3-sonnet**: Excellent for detailed, nuanced conversations
         * - **gemini-pro**: Good balance of speed and capability
         */
        model: Llm.Model;
        /** AI service provider */
        provider: Llm.Provider;
        /**
         * **Most Important Setting**: This defines your agent's personality, knowledge, and behavior.
         *
         * Write this as detailed instructions that include:
         * - **Role**: Who is the agent? (receptionist, support agent, etc.)
         * - **Personality**: Friendly, professional, casual, etc.
         * - **Knowledge**: What does the agent know about?
         * - **Tasks**: What can the agent help with?
         * - **Guidelines**: How should it behave in different situations?
         *
         * **Example**: "You are Georgia, a friendly restaurant receptionist. Help customers make reservations, answer questions about menu and hours. Always be polite and confirm details."
         */
        systemPrompt: string;
        /**
         * Controls creativity vs consistency in responses:
         * - **0.0**: Very consistent, predictable responses
         * - **0.7**: Good balance (recommended)
         * - **1.5+**: More creative but less predictable
         */
        temperature?: number;
        /** Maximum length of agent responses (roughly 4 characters per token) */
        maxTokens?: number;
    }

    export namespace Llm {
        /**
         * Specific AI model to use. Each model has different capabilities:
         * - **gpt-4o**: Most capable, best for complex reasoning
         * - **gpt-4o-mini**: Fast and cost-effective, good for most use cases
         * - **claude-3-sonnet**: Excellent for detailed, nuanced conversations
         * - **gemini-pro**: Good balance of speed and capability
         */
        export type Model =
            | "gpt-4o-mini"
            | "gpt-4o"
            | "gpt-3.5-turbo"
            | "claude-3-sonnet"
            | "claude-3-haiku"
            | "gemini-pro";
        export const Model = {
            Gpt4OMini: "gpt-4o-mini",
            Gpt4O: "gpt-4o",
            Gpt35Turbo: "gpt-3.5-turbo",
            Claude3Sonnet: "claude-3-sonnet",
            Claude3Haiku: "claude-3-haiku",
            GeminiPro: "gemini-pro",
        } as const;
        /**
         * AI service provider
         */
        export type Provider = "openai" | "anthropic" | "google";
        export const Provider = {
            Openai: "openai",
            Anthropic: "anthropic",
            Google: "google",
        } as const;
    }

    /**
     * Speech-to-Text configuration that converts caller voice to text.
     * This determines how accurately the agent understands what callers say.
     */
    export interface Stt {
        /**
         * STT model quality and speed:
         * - **nova-3**: Latest, most accurate (recommended)
         * - **nova-2**: Good balance of speed and accuracy
         * - **base**: Faster but less accurate
         */
        model: Stt.Model;
        /** Speech recognition service provider */
        provider: Stt.Provider;
        /**
         * Language code for speech recognition:
         * - **en**: English
         * - **es**: Spanish
         * - **fr**: French
         * - **de**: German
         * And many more...
         */
        language?: string;
        /** Automatically add punctuation to transcripts */
        punctuate?: boolean;
        /** Filter profanity from transcripts */
        profanityFilter?: boolean;
    }

    export namespace Stt {
        /**
         * STT model quality and speed:
         * - **nova-3**: Latest, most accurate (recommended)
         * - **nova-2**: Good balance of speed and accuracy
         * - **base**: Faster but less accurate
         */
        export type Model = "nova-3" | "nova-2" | "base" | "enhanced";
        export const Model = {
            Nova3: "nova-3",
            Nova2: "nova-2",
            Base: "base",
            Enhanced: "enhanced",
        } as const;
        /**
         * Speech recognition service provider
         */
        export type Provider = "deepgram" | "whisper" | "google" | "azure";
        export const Provider = {
            Deepgram: "deepgram",
            Whisper: "whisper",
            Google: "google",
            Azure: "azure",
        } as const;
    }

    /**
     * Text-to-Speech configuration that controls how the agent's voice sounds.
     * This determines the personality and quality of the agent's speech.
     */
    export interface Tts {
        /**
         * TTS model/engine quality:
         * - **Eleven-turbo-v2-5**: Latest, highest quality (recommended)
         * - **Eleven-turbo-v2**: Fast and good quality
         * - **Eleven-multilingual-v2**: For multiple languages
         */
        model: Tts.Model;
        /**
         * Specific voice personality. Each voice has different characteristics:
         *
         * **Popular ElevenLabs Voices:**
         * - **EXAVITQu4vr4xnSDxMaL**: Professional female voice (Sarah)
         * - **ErXwobaYiN019PkySvjV**: Friendly male voice (Antoni)
         * - **VR6AewLTigWG4xSOukaG**: Energetic female voice (Domi)
         * - **pNInz6obpgDQGcFmaJgB**: Calm male voice (Adam)
         *
         * You can test voices at elevenlabs.io/voice-library
         */
        voiceId: string;
        /** Text-to-speech service provider */
        provider: Tts.Provider;
        /**
         * Voice consistency (ElevenLabs specific):
         * - **0.0**: More variable, expressive
         * - **0.5**: Balanced (recommended)
         * - **1.0**: Very consistent, stable
         */
        stability?: number;
        /**
         * Voice clarity enhancement (ElevenLabs specific):
         * - **0.0**: More natural variation
         * - **0.75**: Good clarity (recommended)
         * - **1.0**: Maximum clarity
         */
        similarityBoost?: number;
        /**
         * Speech speed multiplier:
         * - **0.8**: Slower, more deliberate
         * - **1.0**: Normal speed (recommended)
         * - **1.2**: Faster, more energetic
         */
        speed?: number;
    }

    export namespace Tts {
        /**
         * TTS model/engine quality:
         * - **Eleven-turbo-v2-5**: Latest, highest quality (recommended)
         * - **Eleven-turbo-v2**: Fast and good quality
         * - **Eleven-multilingual-v2**: For multiple languages
         */
        export type Model = "Eleven-turbo-v2-5" | "Eleven-turbo-v2" | "Eleven-multilingual-v2";
        export const Model = {
            ElevenTurboV25: "Eleven-turbo-v2-5",
            ElevenTurboV2: "Eleven-turbo-v2",
            ElevenMultilingualV2: "Eleven-multilingual-v2",
        } as const;
        /**
         * Text-to-speech service provider
         */
        export type Provider = "elevenlabs" | "openai" | "google" | "azure";
        export const Provider = {
            Elevenlabs: "elevenlabs",
            Openai: "openai",
            Google: "google",
            Azure: "azure",
        } as const;
    }

    export interface StructuredDataSchema {
        tags: string[];
        call_type: StructuredDataSchema.CallType;
        call_summary: string;
        sendMenuDishSMS?: boolean;
        reasonOfCallTransfer?: string;
    }

    export namespace StructuredDataSchema {
        export type CallType =
            | "Reservation"
            | "Takeaway"
            | "Delivery"
            | "Walk-in"
            | "Enquiry"
            | "Information"
            | "Other";
        export const CallType = {
            Reservation: "Reservation",
            Takeaway: "Takeaway",
            Delivery: "Delivery",
            WalkIn: "Walk-in",
            Enquiry: "Enquiry",
            Information: "Information",
            Other: "Other",
        } as const;
    }
}
