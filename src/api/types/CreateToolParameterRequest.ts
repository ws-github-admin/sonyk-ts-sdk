/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface CreateToolParameterRequest {
    /**
     * Parameter name that will be sent to your API.
     * Use snake_case format (e.g., customer_name, reservation_date).
     */
    param_name: string;
    /**
     * Data type of the parameter:
     * - **string**: Text values
     * - **integer**: Whole numbers
     * - **number**: Decimal numbers
     * - **boolean**: true/false values
     * - **array**: List of values
     * - **object**: Complex nested data
     */
    param_type: CreateToolParameterRequest.ParamType;
    /** Whether this parameter must be provided */
    is_required?: boolean;
    /**
     * Clear description of what this parameter represents.
     * The agent uses this to understand how to populate the parameter.
     */
    param_description: string;
    default_value?: unknown;
    /** Optional validation rules for the parameter */
    validation_rules?: CreateToolParameterRequest.ValidationRules;
}

export namespace CreateToolParameterRequest {
    /**
     * Data type of the parameter:
     * - **string**: Text values
     * - **integer**: Whole numbers
     * - **number**: Decimal numbers
     * - **boolean**: true/false values
     * - **array**: List of values
     * - **object**: Complex nested data
     */
    export type ParamType = "string" | "integer" | "number" | "boolean" | "array" | "object";
    export const ParamType = {
        String: "string",
        Integer: "integer",
        Number: "number",
        Boolean: "boolean",
        Array: "array",
        Object: "object",
    } as const;

    /**
     * Optional validation rules for the parameter
     */
    export interface ValidationRules {
        /** Minimum value (for numbers) or length (for strings) */
        min?: number;
        /** Maximum value (for numbers) or length (for strings) */
        max?: number;
        /** Regular expression pattern for string validation */
        pattern?: string;
        /** List of allowed values */
        enum?: string[];
    }
}
