/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SonykClient } from "../../src/Client";

describe("Providers", () => {
    test("getProviders", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                providers: [{ id: "openai", name: "OpenAI", description: "OpenAI API key", has_key: true }],
                total_providers: 6,
                configured_providers: 3,
            },
        };
        server
            .mockEndpoint()
            .get("/api/developer/providers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.getProviders();
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                providers: [
                    {
                        id: "openai",
                        name: "OpenAI",
                        description: "OpenAI API key",
                        has_key: true,
                    },
                ],
                total_providers: 6,
                configured_providers: 3,
            },
        });
    });

    test("getProviderKeysStatus", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                configured_providers: ["openai", "groq", "deepgram"],
                total_configured: 3,
                available_providers: ["groq", "openai", "cartesia", "deepgram", "anthropic", "elevenlabs"],
            },
        };
        server
            .mockEndpoint()
            .get("/api/developer/providers/status")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.getProviderKeysStatus();
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                configured_providers: ["openai", "groq", "deepgram"],
                total_configured: 3,
                available_providers: ["groq", "openai", "cartesia", "deepgram", "anthropic", "elevenlabs"],
            },
        });
    });

    test("getProviderKeys", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider_keys: {
                    openai: { masked_key: "sk-pr****cdef", provider_name: "OpenAI", has_key: true },
                    groq: { masked_key: "gsk_****cdef", provider_name: "Groq", has_key: true },
                },
                configured_count: 2,
                last_updated: "2024-01-15T10:30:00Z",
            },
        };
        server
            .mockEndpoint()
            .get("/api/developer/providers/keys")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.getProviderKeys();
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider_keys: {
                    openai: {
                        masked_key: "sk-pr****cdef",
                        provider_name: "OpenAI",
                        has_key: true,
                    },
                    groq: {
                        masked_key: "gsk_****cdef",
                        provider_name: "Groq",
                        has_key: true,
                    },
                },
                configured_count: 2,
                last_updated: "2024-01-15T10:30:00Z",
            },
        });
    });

    test("setProviderKeys", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider_keys: {
                openai: "your_openai_key_here",
                groq: "your_groq_key_here",
                deepgram: "your_deepgram_key_here",
                anthropic: "",
            },
        };
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                updated_providers: ["openai", "groq"],
                total_configured: 3,
                provider_keys: { key: { masked_key: "your****here", provider_name: "OpenAI", has_key: true } },
            },
        };
        server
            .mockEndpoint()
            .put("/api/developer/providers/keys")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.setProviderKeys({
            provider_keys: {
                openai: "your_openai_key_here",
                groq: "your_groq_key_here",
                deepgram: "your_deepgram_key_here",
                anthropic: "",
            },
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                updated_providers: ["openai", "groq"],
                total_configured: 3,
                provider_keys: {
                    key: {
                        masked_key: "your****here",
                        provider_name: "OpenAI",
                        has_key: true,
                    },
                },
            },
        });
    });

    test("getProviderKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider: "openai",
                provider_name: "OpenAI",
                masked_key: "sk-pr****cdef",
                action: "updated",
                has_key: true,
            },
        };
        server
            .mockEndpoint()
            .get("/api/developer/providers/groq/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.getProviderKey("groq");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider: "openai",
                provider_name: "OpenAI",
                masked_key: "sk-pr****cdef",
                action: "updated",
                has_key: true,
            },
        });
    });

    test("setProviderKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { api_key: "your_api_key_here" };
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider: "openai",
                provider_name: "OpenAI",
                masked_key: "sk-pr****cdef",
                action: "updated",
                has_key: true,
            },
        };
        server
            .mockEndpoint()
            .put("/api/developer/providers/groq/key")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.setProviderKey("groq", {
            api_key: "your_api_key_here",
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider: "openai",
                provider_name: "OpenAI",
                masked_key: "sk-pr****cdef",
                action: "updated",
                has_key: true,
            },
        });
    });

    test("removeProviderKey", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider: "openai",
                provider_name: "OpenAI",
                masked_key: "sk-pr****cdef",
                action: "updated",
                has_key: true,
            },
        };
        server
            .mockEndpoint()
            .delete("/api/developer/providers/groq/key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.removeProviderKey("groq");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                provider: "openai",
                provider_name: "OpenAI",
                masked_key: "sk-pr****cdef",
                action: "updated",
                has_key: true,
            },
        });
    });
});
