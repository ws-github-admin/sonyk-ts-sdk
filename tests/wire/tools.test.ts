/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { SonykClient } from "../../src/Client";

describe("Tools", () => {
    test("listTools", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            meta: { pagination: { currentPage: 1, totalPages: 1, totalItems: 1, itemsPerPage: 1 } },
            data: [
                {
                    pk_tool_id: "tool_123abc456def",
                    tool_name: "make_reservation",
                    tool_description: "Creates a new restaurant reservation with specified details",
                    server_url: "https://api.restaurant.com/reservations",
                    parameters: [
                        {
                            param_name: "reservation_date",
                            is_required: true,
                            param_description: "Date for the reservation in YYYY-MM-DD format",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    fk_org_id: 1,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/api/developer/tools")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.listTools();
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            meta: {
                pagination: {
                    currentPage: 1,
                    totalPages: 1,
                    totalItems: 1,
                    itemsPerPage: 1,
                },
            },
            data: [
                {
                    pk_tool_id: "tool_123abc456def",
                    tool_name: "make_reservation",
                    tool_description: "Creates a new restaurant reservation with specified details",
                    server_url: "https://api.restaurant.com/reservations",
                    parameters: [
                        {
                            param_name: "reservation_date",
                            is_required: true,
                            param_description: "Date for the reservation in YYYY-MM-DD format",
                        },
                    ],
                    created_at: "2024-01-15T09:30:00Z",
                    fk_org_id: 1,
                },
            ],
        });
    });

    test("createTool", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tool_name: "make_reservation",
            tool_description:
                "Creates a new restaurant reservation with the specified date, time, party size, and customer details",
            server_url: "https://api.restaurant.com/reservations",
        };
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_tool_id: "tool_123abc456def",
                tool_name: "make_reservation",
                tool_description: "Creates a new restaurant reservation with specified details",
                server_url: "https://api.restaurant.com/reservations",
                parameters: [
                    {
                        param_name: "reservation_date",
                        is_required: true,
                        param_description: "Date for the reservation in YYYY-MM-DD format",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                fk_org_id: 1,
            },
        };
        server
            .mockEndpoint()
            .post("/api/developer/tools")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.createTool({
            tool_name: "make_reservation",
            tool_description:
                "Creates a new restaurant reservation with the specified date, time, party size, and customer details",
            server_url: "https://api.restaurant.com/reservations",
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_tool_id: "tool_123abc456def",
                tool_name: "make_reservation",
                tool_description: "Creates a new restaurant reservation with specified details",
                server_url: "https://api.restaurant.com/reservations",
                parameters: [
                    {
                        param_name: "reservation_date",
                        is_required: true,
                        param_description: "Date for the reservation in YYYY-MM-DD format",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                fk_org_id: 1,
            },
        });
    });

    test("getTool", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_tool_id: "tool_123abc456def",
                tool_name: "make_reservation",
                tool_description: "Creates a new restaurant reservation with specified details",
                server_url: "https://api.restaurant.com/reservations",
                parameters: [
                    {
                        param_name: "reservation_date",
                        is_required: true,
                        param_description: "Date for the reservation in YYYY-MM-DD format",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                fk_org_id: 1,
            },
        };
        server
            .mockEndpoint()
            .get("/api/developer/tools/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.getTool("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_tool_id: "tool_123abc456def",
                tool_name: "make_reservation",
                tool_description: "Creates a new restaurant reservation with specified details",
                server_url: "https://api.restaurant.com/reservations",
                parameters: [
                    {
                        param_name: "reservation_date",
                        is_required: true,
                        param_description: "Date for the reservation in YYYY-MM-DD format",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                fk_org_id: 1,
            },
        });
    });

    test("updateTool", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            tool_name: "make_reservation",
            tool_description:
                "Creates a new restaurant reservation with the specified date, time, party size, and customer details",
            server_url: "https://api.restaurant.com/reservations",
        };
        const rawResponseBody = {
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_tool_id: "tool_123abc456def",
                tool_name: "make_reservation",
                tool_description: "Creates a new restaurant reservation with specified details",
                server_url: "https://api.restaurant.com/reservations",
                parameters: [
                    {
                        param_name: "reservation_date",
                        is_required: true,
                        param_description: "Date for the reservation in YYYY-MM-DD format",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                fk_org_id: 1,
            },
        };
        server
            .mockEndpoint()
            .put("/api/developer/tools/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.updateTool("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx", {
            tool_name: "make_reservation",
            tool_description:
                "Creates a new restaurant reservation with the specified date, time, party size, and customer details",
            server_url: "https://api.restaurant.com/reservations",
        });
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
            data: {
                pk_tool_id: "tool_123abc456def",
                tool_name: "make_reservation",
                tool_description: "Creates a new restaurant reservation with specified details",
                server_url: "https://api.restaurant.com/reservations",
                parameters: [
                    {
                        param_name: "reservation_date",
                        is_required: true,
                        param_description: "Date for the reservation in YYYY-MM-DD format",
                    },
                ],
                created_at: "2024-01-15T09:30:00Z",
                fk_org_id: 1,
            },
        });
    });

    test("deleteTool", async () => {
        const server = mockServerPool.createServer();
        const client = new SonykClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message", timestamp: "2024-01-15T09:30:00Z" };
        server
            .mockEndpoint()
            .delete("/api/developer/tools/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.deleteTool("xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx");
        expect(response).toEqual({
            success: true,
            message: "message",
            timestamp: "2024-01-15T09:30:00Z",
        });
    });
});
